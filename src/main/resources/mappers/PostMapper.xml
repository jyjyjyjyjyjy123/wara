<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.project.wara.mapper.PostMapper">

    <resultMap id="PostResultMap" type="com.project.wara.domain.Post">
        <id property="postSeq" column="post_seq"/>
        <result property="title" column="title"/>
        <result property="createdAt" column="created_at"/>
        <result property="updatedAt" column="updated_at"/>
        <result property="viewCount" column="view_count"/>
        <result property="likeCount" column="likeCount"/>
        <result property="favoriteCount" column="favoriteCount"/>
        <result property="thumbnail" column="thumbnail"/>
        <association property="user" javaType="com.project.wara.domain.User">
            <id property="userSeq" column="user_seq"/>
            <result property="userId" column="Id"/>
            <result property="nickname" column="nickname"/>
            <result property="profileImage" column="profile_image"/>
        </association>
    </resultMap>

    <resultMap id="CommentResultMap" type="com.project.wara.domain.Comment">
        <id property="commentSeq" column="comment_seq"/>
        <result property="postSeq" column="post_seq"/>
        <result property="content" column="content"/>
        <result property="createdAt" column="created_at"/>
        <association property="user" javaType="com.project.wara.domain.User">
            <id property="userSeq" column="user_seq"/>
            <result property="userId" column="Id"/>
            <result property="nickname" column="nickname"/>
            <result property="profileImage" column="profile_image"/>
        </association>
    </resultMap>

    <!-- 인기글 조회 -->
    <select id="selectPopularPosts" resultMap="PostResultMap">
        SELECT *
        FROM (
            SELECT p.post_seq, p.title, p.user_seq, p.created_at, p.updated_at, p.view_count,
            NVL(vc.total_views, 0) AS total_views,
            (SELECT COUNT(*) FROM like_tbl l WHERE l.post_seq = p.post_seq) AS likeCount,
            (SELECT COUNT(*) FROM favorite_tbl f WHERE f.post_seq = p.post_seq) AS favoriteCount,
            (
            SELECT content
            FROM (
                SELECT pc.content AS content, pc.post_seq AS pc_post_seq,
                ROW_NUMBER() OVER (PARTITION BY pc.post_seq ORDER BY pc.order_num ASC) AS rn
                FROM post_content_tbl pc
                WHERE pc.type='IMAGE'
            ) sub
            WHERE sub.rn = 1 AND sub.pc_post_seq = p.post_seq
            ) AS thumbnail
            FROM post_tbl p
            LEFT JOIN (
                SELECT post_seq, COUNT(*) AS total_views
                FROM post_view_log
                GROUP BY post_seq
            ) vc ON vc.post_seq = p.post_seq
            ORDER BY NVL(vc.total_views, 0) DESC
        )
        WHERE ROWNUM &lt;= 9
    </select>

    <!-- 인기 위치 -->
    <select id="getTopLocations" resultType="com.project.wara.domain.PostContent">
        SELECT *
        FROM (
            SELECT
            DBMS_LOB.SUBSTR(pc.content, 1000) AS content
            FROM POST_CONTENT_TBL pc
            WHERE pc.type = 'LOCATION'
            GROUP BY DBMS_LOB.SUBSTR(pc.content, 1000)
            ORDER BY COUNT(*) DESC
        )
        WHERE ROWNUM &lt;= 9
    </select>

    <!-- 전체 게시글 조회 -->
    <select id="getPosts" parameterType="map" resultMap="PostResultMap">
        SELECT *
        FROM (
            SELECT  p.post_seq, p.title, p.created_at, p.updated_at,
                    u.id AS user_id, u.nickname, u.profile_image, p.view_count,
            (SELECT COUNT(*) FROM like_tbl l WHERE l.post_seq = p.post_seq) AS likeCount,
            (SELECT COUNT(*) FROM favorite_tbl f WHERE f.post_seq = p.post_seq) AS favoriteCount,
            (
                SELECT pc.content
                FROM post_content_tbl pc
                WHERE pc.post_seq = p.post_seq
                AND pc.type = 'IMAGE'
                AND ROWNUM = 1
            ) AS thumbnail,
            ROW_NUMBER() OVER (
            ORDER BY
            <choose>
                <when test="sort == 'view'">
                    p.view_count DESC
                </when>
                <when test="sort == 'favorite'">
                    (SELECT COUNT(*) FROM favorite_tbl f2 WHERE f2.post_seq = p.post_seq) DESC
                </when>
                <when test="sort == 'like'">
                    (SELECT COUNT(*) FROM like_tbl l2 WHERE l2.post_seq = p.post_seq) DESC
                </when>
                <otherwise>
                    p.created_at DESC
                </otherwise>
            </choose>
            ) AS rn
            FROM post_tbl p
            JOIN user_tbl u ON p.user_seq = u.user_seq
        ) t
        WHERE t.rn &gt; #{offset} AND t.rn &lt;= #{offset} + #{limit}
    </select>

    <!-- 게시글 총 개수 -->
    <select id="countPosts" resultType="int">
        SELECT COUNT(*) FROM post_tbl
    </select>

    <!-- 단일 게시글 -->
    <select id="getPost" parameterType="long" resultMap="PostResultMap">
        SELECT  p.post_seq, p.title, p.created_at, p.updated_at, p.view_count,
                u.user_seq, u.id, u.nickname, u.profile_image
        FROM post_tbl p
        JOIN user_tbl u ON p.user_seq = u.user_seq
        WHERE p.post_seq = #{postSeq}
    </select>

    <!-- 게시글 내용 -->
    <select id="getPostContents" parameterType="long" resultType="com.project.wara.domain.PostContent">
        SELECT post_content_seq, post_seq, type, content, latitude, longitude, order_num
        FROM post_content_tbl
        WHERE post_seq = #{postSeq}
        ORDER BY order_num ASC
    </select>

    <!-- 댓글 + 작성자 -->
    <select id="getComments" parameterType="long" resultMap="CommentResultMap">
        SELECT  c.comment_seq, c.post_seq, c.content, c.created_at,
                u.id, u.nickname, u.profile_image
        FROM comment_tbl c
        JOIN user_tbl u ON c.user_seq = u.user_seq
        WHERE c.post_seq = #{postSeq}
        ORDER BY c.created_at ASC
    </select>

    <!-- 조회수 1 증가 -->
    <update id="incrementViewCount">
        UPDATE POST_TBL
        SET view_count = NVL(view_count, 0) + 1
        WHERE post_seq = #{postSeq}
    </update>

    <!-- 조회 로그 확인 -->
    <select id="hasViewedRecently" resultType="boolean">
        SELECT CASE WHEN COUNT(*) > 0 THEN 1 ELSE 0 END
        FROM POST_VIEW_LOG
        WHERE POST_SEQ = #{postSeq, jdbcType=NUMERIC}
        AND (
        (USER_SEQ IS NOT NULL AND USER_SEQ = #{userSeq, jdbcType=NUMERIC})
        OR (USER_SEQ IS NULL AND CLIENT_ID = #{clientId, jdbcType=VARCHAR})
        )
        AND VIEWED_AT > SYSTIMESTAMP - INTERVAL '1' HOUR
    </select>

    <!-- 로그 기록 -->
    <insert id="insertViewLog">
        INSERT INTO POST_VIEW_LOG (POST_SEQ, USER_SEQ, CLIENT_ID, VIEWED_AT)
        VALUES (
            #{postSeq, jdbcType=NUMERIC},
            #{userSeq, jdbcType=NUMERIC},
            #{clientId, jdbcType=VARCHAR},
            SYSTIMESTAMP
        )
    </insert>

    <!-- 좋아요 관련 -->
    <select id="isLiked" resultType="boolean">
        SELECT CASE WHEN COUNT(*) > 0 THEN 1 ELSE 0 END
        FROM like_tbl l
        JOIN user_tbl u ON l.user_seq = u.user_seq
        WHERE l.post_seq = #{postSeq} AND u.user_seq = #{userSeq}
    </select>

    <select id="countLikes" resultType="int">
        SELECT COUNT(*)
        FROM like_tbl
        WHERE post_seq = #{postSeq}
    </select>

    <insert id="insertLike">
        INSERT INTO like_tbl (post_seq, user_seq)
        VALUES (#{postSeq}, #{userSeq})
    </insert>

    <delete id="deleteLike">
        DELETE FROM like_tbl
        WHERE post_seq = #{postSeq} AND user_seq = #{userSeq}
    </delete>

    <!-- 즐겨찾기 관련 -->
    <select id="isFavorited" resultType="boolean">
        SELECT CASE WHEN COUNT(*) > 0 THEN 1 ELSE 0 END
        FROM favorite_tbl f
        JOIN user_tbl u ON f.user_seq = u.user_seq
        WHERE f.post_seq = #{postSeq} AND u.user_seq = #{userSeq}
    </select>

    <select id="countFavorites" resultType="int">
        SELECT COUNT(*)
        FROM favorite_tbl
        WHERE post_seq = #{postSeq}
    </select>

    <insert id="insertFavorite">
        INSERT INTO favorite_tbl (post_seq, user_seq)
        VALUES (#{postSeq}, #{userSeq})
    </insert>

    <delete id="deleteFavorite">
        DELETE FROM favorite_tbl
        WHERE post_seq = #{postSeq} AND user_seq = #{userSeq}
    </delete>

    <!-- 댓글 관련 -->
    <insert id="insertComment" useGeneratedKeys="true" keyProperty="commentSeq"
            keyColumn="comment_Seq" parameterType="com.project.wara.domain.Comment">
        INSERT INTO COMMENT_TBL ( post_seq, user_seq, content)
        VALUES (#{postSeq}, #{userSeq}, #{content})
    </insert>

    <delete id="deleteComment" parameterType="long">
        DELETE FROM COMMENT_TBL WHERE comment_seq = #{commentSeq}
    </delete>

    <!-- 게시글 및 콘텐츠 INSERT -->
    <insert id="insertPost" parameterType="Post" useGeneratedKeys="true"
            keyProperty="postSeq" keyColumn="post_seq">
        INSERT INTO POST_TBL (title, user_seq)
        VALUES (#{title}, #{user.userSeq})
    </insert>

    <insert id="insertPostContent">
        INSERT INTO POST_CONTENT_TBL (
            post_seq, type, content, latitude, longitude, order_num
        )
        VALUES (
            #{postSeq}, #{type}, #{content},
            #{latitude, jdbcType=DOUBLE}, #{longitude, jdbcType=DOUBLE}, #{orderNum}
        )
    </insert>

    <!-- 게시글 수정/삭제 -->
    <update id="updatePostTitle" parameterType="map">
        UPDATE POST_TBL SET title = #{title}, updated_at = CURRENT_TIMESTAMP WHERE post_seq = #{postSeq}
    </update>
    <select id="findById" resultMap="PostResultMap" parameterType="long">
        SELECT  p.post_seq, p.title, p.created_at, p.updated_at, p.view_count,
                u.user_seq, u.id AS user_id, u.nickname, u.profile_image
        FROM POST_TBL p
        JOIN USER_TBL u ON p.user_seq = u.user_seq
        WHERE p.post_seq = #{postSeq}
    </select>
    <delete id="deleteFavoriteAll">
        DELETE FROM favorite_tbl
        WHERE post_seq = #{postSeq}
    </delete>
    <delete id="deleteLikeAll">
        DELETE FROM like_tbl
        WHERE post_seq = #{postSeq}
    </delete>
    <delete id="deleteCommentAll">
        DELETE FROM COMMENT_TBL
        WHERE post_seq = #{postSeq}
    </delete>
    <delete id="deletePostContents" parameterType="long">
        DELETE FROM POST_CONTENT_TBL WHERE post_seq = #{postSeq}
    </delete>
    <delete id="deletePost" parameterType="long">
        DELETE FROM POST_TBL WHERE post_seq = #{postSeq}
    </delete>

    <!-- 위치 데이터가 포함된 게시글 조회 -->
    <select id="getPostsWithLocations" resultType="com.project.wara.domain.PostContent">
        SELECT pc.post_seq, p.title, u.nickname, pc.latitude, pc.longitude, pc.content
        FROM POST_CONTENT_TBL pc
        JOIN POST_TBL p ON p.post_seq = pc.post_seq
        JOIN USER_TBL u ON u.user_seq = p.user_seq
        WHERE pc.type = 'LOCATION'
    </select>

    <!-- 특정 위치 근처 게시글 조회 -->
    <select id="getPostsNearLocation" resultType="com.project.wara.domain.Post">
        SELECT DISTINCT p.post_seq, p.title, u.nickname, p.created_at, pc.latitude, pc.longitude
        FROM POST_TBL p
        JOIN POST_CONTENT_TBL pc ON p.post_seq = pc.post_seq
        JOIN USER_TBL u ON u.user_seq = p.user_seq
        WHERE pc.type = 'LOCATION'
        AND ABS(pc.latitude - #{latitude}) &lt; 0.001
        AND ABS(pc.longitude - #{longitude}) &lt; 0.001
    </select>

</mapper>
