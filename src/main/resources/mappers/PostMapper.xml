<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.project.wara.mapper.PostMapper">

    <resultMap id="PostResultMap" type="com.project.wara.domain.Post">
        <id property="postSeq" column="post_seq"/>
        <result property="title" column="title"/>
        <result property="createdAt" column="created_at"/>
        <result property="updatedAt" column="updated_at"/>
        <result property="viewCount" column="view_count"/>
        <result property="likeCount" column="likecount"/>
        <result property="favoriteCount" column="favoritecount"/>
        <result property="thumbnail" column="thumbnail"/>
        <association property="user" javaType="com.project.wara.domain.User">
            <id property="userSeq" column="user_seq"/>
            <result property="userId" column="id"/>
            <result property="nickname" column="nickname"/>
            <result property="profileImage" column="profile_image"/>
        </association>
    </resultMap>

    <resultMap id="CommentResultMap" type="com.project.wara.domain.Comment">
        <id property="commentSeq" column="comment_seq"/>
        <result property="postSeq" column="post_seq"/>
        <result property="content" column="content"/>
        <result property="createdAt" column="created_at"/>
        <association property="user" javaType="com.project.wara.domain.User">
            <id property="userSeq" column="user_seq"/>
            <result property="userId" column="id"/>
            <result property="nickname" column="nickname"/>
            <result property="profileImage" column="profile_image"/>
        </association>
    </resultMap>

    <!-- 인기글 조회 -->
    <select id="selectPopularPosts" resultMap="PostResultMap">
        SELECT *
        FROM (
        SELECT p.post_seq, p.title, p.user_seq, p.created_at, p.updated_at, p.view_count,
        COALESCE(vc.total_views, 0) AS total_views,
        (SELECT COUNT(*) FROM like_tbl l WHERE l.post_seq = p.post_seq) AS likecount,
        (SELECT COUNT(*) FROM favorite_tbl f WHERE f.post_seq = p.post_seq) AS favoritecount,
        (
        SELECT content
        FROM (
        SELECT pc.content AS content, pc.post_seq AS pc_post_seq,
        ROW_NUMBER() OVER (PARTITION BY pc.post_seq ORDER BY pc.order_num ASC) AS rn
        FROM post_content_tbl pc
        WHERE pc.type='IMAGE'
        ) sub
        WHERE sub.rn = 1 AND sub.pc_post_seq = p.post_seq
        ) AS thumbnail
        FROM post_tbl p
        LEFT JOIN (
        SELECT post_seq, COUNT(*) AS total_views
        FROM post_view_log
        GROUP BY post_seq
        ) vc ON vc.post_seq = p.post_seq
        ORDER BY COALESCE(vc.total_views, 0) DESC
        LIMIT 9
        ) sub
    </select>

    <!-- 인기 위치 -->
    <select id="getTopLocations" resultType="com.project.wara.domain.PostContent">
        SELECT SUBSTRING(pc.content FROM 1 FOR 1000) AS content
        FROM post_content_tbl pc
        WHERE pc.type = 'LOCATION'
        GROUP BY SUBSTRING(pc.content FROM 1 FOR 1000)
        ORDER BY COUNT(*) DESC
        LIMIT 9
    </select>

    <!-- 전체 게시글 조회 -->
    <select id="getPosts" parameterType="map" resultMap="PostResultMap">
        SELECT *
        FROM (
        SELECT p.post_seq, p.title, p.created_at, p.updated_at,
        u.id AS user_id, u.nickname, u.profile_image, p.view_count,
        (SELECT COUNT(*) FROM like_tbl l WHERE l.post_seq = p.post_seq) AS likecount,
        (SELECT COUNT(*) FROM favorite_tbl f WHERE f.post_seq = p.post_seq) AS favoritecount,
        (
        SELECT pc.content
        FROM post_content_tbl pc
        WHERE pc.post_seq = p.post_seq
        AND pc.type = 'IMAGE'
        LIMIT 1
        ) AS thumbnail,
        ROW_NUMBER() OVER (
        ORDER BY
        <choose>
            <when test="sort == 'view'">p.view_count DESC</when>
            <when test="sort == 'favorite'">(SELECT COUNT(*) FROM favorite_tbl f2 WHERE f2.post_seq = p.post_seq) DESC</when>
            <when test="sort == 'like'">(SELECT COUNT(*) FROM like_tbl l2 WHERE l2.post_seq = p.post_seq) DESC</when>
            <otherwise>p.created_at DESC</otherwise>
        </choose>
        ) AS rn
        FROM post_tbl p
        JOIN user_tbl u ON p.user_seq = u.user_seq
        ) t
        WHERE t.rn &gt; #{offset} AND t.rn &lt;= #{offset} + #{limit}
    </select>

    <select id="countPosts" resultType="int">
        SELECT COUNT(*) FROM post_tbl
    </select>

    <select id="getPost" parameterType="long" resultMap="PostResultMap">
        SELECT  p.post_seq, p.title, p.created_at, p.updated_at, p.view_count,
        u.user_seq, u.id, u.nickname, u.profile_image
        FROM post_tbl p
        JOIN user_tbl u ON p.user_seq = u.user_seq
        WHERE p.post_seq = #{postSeq}
    </select>

    <select id="getPostContents" parameterType="long" resultType="com.project.wara.domain.PostContent">
        SELECT post_content_seq, post_seq, type, content, latitude, longitude, order_num
        FROM post_content_tbl
        WHERE post_seq = #{postSeq}
        ORDER BY order_num ASC
    </select>

    <select id="getComments" parameterType="long" resultMap="CommentResultMap">
        SELECT  c.comment_seq, c.post_seq, c.content, c.created_at,
        u.id, u.nickname, u.profile_image
        FROM comment_tbl c
        JOIN user_tbl u ON c.user_seq = u.user_seq
        WHERE c.post_seq = #{postSeq}
        ORDER BY c.created_at ASC
    </select>

    <update id="incrementViewCount">
        UPDATE post_tbl
        SET view_count = COALESCE(view_count,0) + 1
        WHERE post_seq = #{postSeq}
    </update>

    <select id="hasViewedRecently" resultType="boolean">
        SELECT CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END
        FROM post_view_log
        WHERE post_seq = #{postSeq}
        AND ((user_seq IS NOT NULL AND user_seq = #{userSeq}) OR (user_seq IS NULL AND client_id = #{clientId}))
        AND viewed_at > NOW() - INTERVAL '1 hour'
    </select>

    <insert id="insertViewLog">
        INSERT INTO post_view_log (post_seq, user_seq, client_id, viewed_at)
        VALUES (#{postSeq}, #{userSeq}, #{clientId}, NOW())
    </insert>

    <select id="isLiked" resultType="boolean">
        SELECT CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END
        FROM like_tbl
        WHERE post_seq = #{postSeq} AND user_seq = #{userSeq}
    </select>

    <select id="countLikes" resultType="int">
        SELECT COUNT(*) FROM like_tbl WHERE post_seq = #{postSeq}
    </select>

    <insert id="insertLike">
        INSERT INTO like_tbl (post_seq, user_seq) VALUES (#{postSeq}, #{userSeq})
    </insert>

    <delete id="deleteLike">
        DELETE FROM like_tbl WHERE post_seq = #{postSeq} AND user_seq = #{userSeq}
    </delete>

    <select id="isFavorited" resultType="boolean">
        SELECT CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END
        FROM favorite_tbl
        WHERE post_seq = #{postSeq} AND user_seq = #{userSeq}
    </select>

    <select id="countFavorites" resultType="int">
        SELECT COUNT(*) FROM favorite_tbl WHERE post_seq = #{postSeq}
    </select>

    <insert id="insertFavorite">
        INSERT INTO favorite_tbl (post_seq, user_seq) VALUES (#{postSeq}, #{userSeq})
    </insert>

    <delete id="deleteFavorite">
        DELETE FROM favorite_tbl WHERE post_seq = #{postSeq} AND user_seq = #{userSeq}
    </delete>

    <insert id="insertComment" useGeneratedKeys="true" keyProperty="commentSeq" keyColumn="comment_seq" parameterType="com.project.wara.domain.Comment">
        INSERT INTO comment_tbl (post_seq, user_seq, content)
        VALUES (#{postSeq}, #{userSeq}, #{content})
    </insert>

    <delete id="deleteComment" parameterType="long">
        DELETE FROM comment_tbl WHERE comment_seq = #{commentSeq}
    </delete>

    <insert id="insertPost" parameterType="com.project.wara.domain.Post" useGeneratedKeys="true" keyProperty="postSeq" keyColumn="post_seq">
        INSERT INTO post_tbl (title, user_seq) VALUES (#{title}, #{user.userSeq})
    </insert>

    <insert id="insertPostContent">
        INSERT INTO post_content_tbl (post_seq, type, content, latitude, longitude, order_num)
        VALUES (#{postSeq}, #{type}, #{content}, #{latitude}, #{longitude}, #{orderNum})
    </insert>

    <update id="updatePostTitle" parameterType="map">
        UPDATE post_tbl SET title = #{title}, updated_at = NOW() WHERE post_seq = #{postSeq}
    </update>

    <delete id="deleteFavoriteAll">
        DELETE FROM favorite_tbl WHERE post_seq = #{postSeq}
    </delete>

    <delete id="deleteLikeAll">
        DELETE FROM like_tbl WHERE post_seq = #{postSeq}
    </delete>

    <delete id="deleteCommentAll">
        DELETE FROM comment_tbl WHERE post_seq = #{postSeq}
    </delete>

    <delete id="deletePostContents">
        DELETE FROM post_content_tbl WHERE post_seq = #{postSeq}
    </delete>

    <delete id="deletePost">
        DELETE FROM post_tbl WHERE post_seq = #{postSeq}
    </delete>

    <select id="getPostsWithLocations" resultType="com.project.wara.domain.PostContent">
        SELECT pc.post_seq, p.title, u.nickname, pc.latitude, pc.longitude, pc.content
        FROM post_content_tbl pc
        JOIN post_tbl p ON p.post_seq = pc.post_seq
        JOIN user_tbl u ON u.user_seq = p.user_seq
        WHERE pc.type = 'LOCATION'
    </select>

    <select id="getPostsNearLocation" resultType="com.project.wara.domain.Post">
        SELECT DISTINCT p.post_seq, p.title, u.nickname, p.created_at, pc.latitude, pc.longitude
        FROM post_tbl p
        JOIN post_content_tbl pc ON p.post_seq = pc.post_seq
        JOIN user_tbl u ON u.user_seq = p.user_seq
        WHERE pc.type = 'LOCATION'
        AND ABS(pc.latitude - #{latitude}) &lt; 0.001
        AND ABS(pc.longitude - #{longitude}) &lt; 0.001
    </select>

</mapper>
